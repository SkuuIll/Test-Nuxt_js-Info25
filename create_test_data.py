#!/usr/bin/env python
import os
import django

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_blog.settings')
django.setup()

from accounts.models import User
from posts.models import Post, Categoria
from django.utils import timezone

def create_test_data():
    print("üîß Creando datos de prueba...")
    
    # Crear categor√≠as
    categorias = [
        {'nombre': 'Tecnolog√≠a', 'descripcion': 'Posts sobre tecnolog√≠a y programaci√≥n'},
        {'nombre': 'Noticias', 'descripcion': '√öltimas noticias y actualidades'},
        {'nombre': 'Tutorial', 'descripcion': 'Tutoriales y gu√≠as paso a paso'},
        {'nombre': 'Opini√≥n', 'descripcion': 'Art√≠culos de opini√≥n y an√°lisis'},
    ]
    
    for cat_data in categorias:
        categoria, created = Categoria.objects.get_or_create(
            nombre=cat_data['nombre'],
            defaults={'descripcion': cat_data['descripcion']}
        )
        if created:
            print(f"‚úÖ Categor√≠a creada: {categoria.nombre}")
        else:
            print(f"‚ÑπÔ∏è Categor√≠a '{categoria.nombre}' ya existe")
    
    # Obtener usuario admin
    admin = User.objects.get(username='admin')
    
    # Crear posts de prueba
    posts_data = [
        {
            'titulo': 'Introducci√≥n a Django REST Framework',
            'contenido': '''Django REST Framework es una potente biblioteca para construir APIs web. 
            
En este post exploraremos las caracter√≠sticas principales:

## Caracter√≠sticas principales
- Serializaci√≥n autom√°tica
- Autenticaci√≥n y permisos
- Navegaci√≥n web de la API
- Documentaci√≥n autom√°tica

## Ejemplo b√°sico
```python
from rest_framework import serializers

class PostSerializer(serializers.ModelSerializer):
    class Meta:
        model = Post
        fields = '__all__'
```

¬°Es muy f√°cil de usar!''',
            'autor': admin,
            'categoria': 'Tecnolog√≠a',
            'status': 'published'
        },
        {
            'titulo': 'Gu√≠a completa de Vue.js 3',
            'contenido': '''Vue.js 3 trae muchas mejoras y nuevas caracter√≠sticas.

## Novedades en Vue 3
- Composition API
- Mejor rendimiento
- TypeScript nativo
- Fragments

## Composition API
La nueva Composition API permite organizar mejor el c√≥digo:

```javascript
import { ref, computed } from 'vue'

export default {
  setup() {
    const count = ref(0)
    const doubled = computed(() => count.value * 2)
    
    return { count, doubled }
  }
}
```''',
            'autor': admin,
            'categoria': 'Tutorial',
            'status': 'published'
        },
        {
            'titulo': 'El futuro del desarrollo web',
            'contenido': '''El desarrollo web est√° evolucionando r√°pidamente.

## Tendencias actuales
- JAMstack
- Serverless
- Progressive Web Apps
- WebAssembly

## Mi opini√≥n
Creo que el futuro est√° en aplicaciones m√°s r√°pidas y eficientes. 
Las herramientas modernas nos permiten crear experiencias incre√≠bles.

¬øQu√© opinas t√∫?''',
            'autor': admin,
            'categoria': 'Opini√≥n',
            'status': 'published'
        },
        {
            'titulo': 'Configurando un proyecto con Nuxt.js',
            'contenido': '''Nuxt.js es un framework incre√≠ble para Vue.js.

## Instalaci√≥n
```bash
npx nuxi@latest init mi-proyecto
cd mi-proyecto
npm install
npm run dev
```

## Estructura del proyecto
- `pages/` - Rutas autom√°ticas
- `components/` - Componentes reutilizables
- `layouts/` - Plantillas de p√°gina
- `middleware/` - L√≥gica de middleware

¬°Muy f√°cil de usar!''',
            'autor': admin,
            'categoria': 'Tutorial',
            'status': 'draft'
        },
        {
            'titulo': '√öltimas noticias en tecnolog√≠a',
            'contenido': '''Resumen de las noticias m√°s importantes de esta semana.

## Destacados
- Nueva versi√≥n de Python
- Actualizaciones en frameworks JavaScript
- Avances en IA y Machine Learning

## Python 3.12
La nueva versi√≥n incluye mejoras de rendimiento significativas.

## JavaScript
Los frameworks siguen evolucionando con nuevas caracter√≠sticas.''',
            'autor': admin,
            'categoria': 'Noticias',
            'status': 'published'
        }
    ]
    
    for post_data in posts_data:
        categoria = Categoria.objects.get(nombre=post_data['categoria'])
        
        post, created = Post.objects.get_or_create(
            titulo=post_data['titulo'],
            defaults={
                'contenido': post_data['contenido'],
                'autor': post_data['autor'],
                'categoria': categoria,
                'status': post_data['status'],
                'fecha_publicacion': timezone.now()
            }
        )
        
        if created:
            print(f"‚úÖ Post creado: {post.titulo} (por {post.autor.username})")
        else:
            print(f"‚ÑπÔ∏è Post '{post.titulo}' ya existe")
    
    print(f"\nüìä Resumen:")
    print(f"  - Categor√≠as: {Categoria.objects.count()}")
    print(f"  - Posts totales: {Post.objects.count()}")
    print(f"  - Posts publicados: {Post.objects.filter(status='published').count()}")
    print(f"  - Posts en borrador: {Post.objects.filter(status='draft').count()}")

if __name__ == '__main__':
    create_test_data()