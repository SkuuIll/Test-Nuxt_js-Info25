import{al as oe,r as l,e as C,s as ne,q as re,j as G,T as X,C as ae,a4 as ie,D as se}from"./BE3ND16f.js";const ce=oe("notifications",()=>{const n=l([]),a=l(0),u=l(0),k=l(null),b=l(null),E=l(!1),g=l(null),S=l(!1),y=l("disconnected"),v=l(0),$=5,A=l(1),O=l(20),T=l(!1),x=l(!1),N=l({include_read:!0,include_dismissed:!1,page:1,page_size:20});let c=null,p=null;const W=()=>G(),P=()=>X(),M=C(()=>n.value.filter(e=>!e.is_read&&!e.is_dismissed)),R=C(()=>n.value.slice(0,5)),U=C(()=>{const e={};return n.value.forEach(o=>{e[o.notification_type]||(e[o.notification_type]=[]),e[o.notification_type].push(o)}),e}),B=C(()=>a.value>0),I=async(e={})=>{var o;try{E.value=!0,g.value=null;const{isAuthenticated:r}=ne();if(!r.value){console.log("User not authenticated, skipping notifications fetch");return}const s={...N.value,...e},w=new URLSearchParams;Object.entries(s).forEach(([te,z])=>{z!=null&&z!==""&&w.append(te,String(z))});const{$fetch:h}=W(),f=await h(`/api/v1/notifications/?${w.toString()}`);f.results&&(e.page===1||!e.page?n.value=f.results:n.value.push(...f.results),u.value=f.count||0,a.value=f.unread_count||0,T.value=!!f.next,x.value=!!f.previous,A.value=e.page||1),console.log(`✅ Fetched ${((o=f.results)==null?void 0:o.length)||0} notifications`)}catch(r){console.error("❌ Error fetching notifications:",r),g.value={message:r.message||"Error fetching notifications",code:r.statusCode||r.status,details:r}}finally{E.value=!1}},L=async e=>{try{const o=await $fetch(`/api/v1/notifications/${e}/`),r=n.value.findIndex(s=>s.id===e);return r!==-1&&(n.value[r]=o),o}catch(o){return console.error(`❌ Error fetching notification ${e}:`,o),null}},F=async e=>{try{if((await $fetch(`/api/v1/notifications/${e}/read/`,{method:"POST"})).success){const r=n.value.find(s=>s.id===e);return r&&!r.is_read&&(r.is_read=!0,r.read_at=new Date().toISOString(),a.value=Math.max(0,a.value-1)),console.log(`✅ Marked notification ${e} as read`),!0}return!1}catch(o){return console.error(`❌ Error marking notification ${e} as read:`,o),!1}},j=async()=>{try{const e=await $fetch("/api/v1/notifications/mark-all-read/",{method:"POST"});return e.success?(n.value.forEach(o=>{o.is_read||(o.is_read=!0,o.read_at=new Date().toISOString())}),a.value=0,console.log(`✅ Marked ${e.count} notifications as read`),!0):!1}catch(e){return console.error("❌ Error marking all notifications as read:",e),!1}},H=async e=>{try{if((await $fetch(`/api/v1/notifications/${e}/dismiss/`,{method:"POST"})).success){const r=n.value.findIndex(s=>s.id===e);return r!==-1&&(n.value[r].is_read||(a.value=Math.max(0,a.value-1)),n.value.splice(r,1),u.value=Math.max(0,u.value-1)),console.log(`✅ Dismissed notification ${e}`),!0}return!1}catch(o){return console.error(`❌ Error dismissing notification ${e}:`,o),!1}},J=async e=>{try{const o=await $fetch("/api/v1/notifications/bulk-action/",{method:"POST",body:e});return o.success?(e.notification_ids.forEach(r=>{const s=n.value.find(w=>w.id===r);if(s)switch(e.action){case"mark_read":s.is_read||(s.is_read=!0,s.read_at=new Date().toISOString());break;case"mark_unread":s.is_read&&(s.is_read=!1,s.read_at=void 0);break;case"dismiss":const w=n.value.findIndex(h=>h.id===r);w!==-1&&n.value.splice(w,1);break}}),a.value=o.unread_count||0,console.log(`✅ Bulk action ${e.action} completed for ${e.notification_ids.length} notifications`),!0):!1}catch(o){return console.error("❌ Error performing bulk action:",o),!1}},Y=async()=>{try{const e=await $fetch("/api/v1/notifications/preferences/");return k.value=e,console.log("✅ Fetched notification preferences"),e}catch(e){return console.error("❌ Error fetching notification preferences:",e),null}},q=async e=>{try{const o=await $fetch("/api/v1/notifications/preferences/",{method:"PATCH",body:e});return k.value=o,console.log("✅ Updated notification preferences"),!0}catch(o){return console.error("❌ Error updating notification preferences:",o),!1}},K=async()=>{try{const e=await $fetch("/api/v1/notifications/stats/");return b.value=e,console.log("✅ Fetched notification statistics"),e}catch(e){return console.error("❌ Error fetching notification statistics:",e),null}},V=async()=>{try{const e=await $fetch("/api/v1/notifications/admin/stats/");return console.log("✅ Fetched admin notification statistics"),e}catch(e){return console.error("❌ Error fetching admin notification statistics:",e),null}},D=async()=>{try{const e=await $fetch("/api/v1/notifications/unread-count/");return a.value=e.unread_count,e.unread_count}catch(e){return console.error("❌ Error fetching unread count:",e),0}},Q=async e=>{try{return(await $fetch("/api/v1/notifications/announcements/create/",{method:"POST",body:e})).success?(console.log(`✅ Created system announcement: ${e.title}`),!0):!1}catch(o){return console.error("❌ Error creating system announcement:",o),!1}},t=async()=>{const e=P();if(!e.isAuthenticated.value||!e.user.value){console.warn("⚠️ Cannot connect to notifications: User not authenticated");return}if(c&&c.readyState===WebSocket.OPEN){console.log("🔌 Already connected to notifications WebSocket");return}try{y.value="connecting",console.log("🔌 Connecting to notifications WebSocket...");const{tokenUtils:o}=re(),r=o.getTokens();if(!r.access)throw new Error("No access token available");const w=`${config.public.wsBase||config.public.apiBase.replace("http","ws")}/ws/notifications/?token=${r.access}`;c=new WebSocket(w),c.onopen=()=>{console.log("✅ Connected to notifications WebSocket"),y.value="connected",S.value=!0,v.value=0,p&&(clearTimeout(p),p=null)},c.onmessage=h=>{try{const f=JSON.parse(h.data);d(f)}catch(f){console.error("❌ Error parsing WebSocket message:",f)}},c.onclose=h=>{console.log("🔌 Notifications WebSocket disconnected:",h.code,h.reason),y.value="disconnected",S.value=!1,h.code!==1e3&&v.value<$&&m()},c.onerror=h=>{console.error("❌ Notifications WebSocket error:",h),y.value="error",g.value={message:"WebSocket connection error",code:"WEBSOCKET_ERROR"}}}catch(o){console.error("❌ Failed to connect to notifications WebSocket:",o),y.value="error",g.value={message:o.message||"Failed to connect to notifications",code:"CONNECTION_FAILED"}}},i=()=>{p&&(clearTimeout(p),p=null),c&&(c.close(1e3,"Manual disconnect"),c=null),y.value="disconnected",S.value=!1,v.value=0,console.log("🔌 Disconnected from notifications WebSocket")},m=()=>{if(v.value>=$){console.error("❌ Max reconnection attempts reached");return}v.value++;const e=Math.min(1e3*Math.pow(2,v.value),3e4);console.log(`🔄 Scheduling reconnect attempt ${v.value}/${$} in ${e}ms`),p=setTimeout(()=>{t()},e)},d=e=>{switch(e.type){case"connection_established":console.log("🔌 WebSocket connection established");break;case"notification":e.notification&&_(e.notification);break;case"notification_update":e.update&&Z(e.update);break;case"system_announcement":e.announcement&&ee(e.announcement);break;case"pong":break;default:console.warn("⚠️ Unknown WebSocket message type:",e.type)}},_=e=>{var r;n.value.unshift(e),e.is_read||a.value++,u.value++,console.log(`📬 Received new notification: ${e.title}`),(r=G().$bus)==null||r.emit("new-notification",e)},Z=e=>{switch(e.type){case"marked_read":if(e.notification_id){const o=n.value.find(r=>r.id===e.notification_id);o&&!o.is_read&&(o.is_read=!0,o.read_at=new Date().toISOString())}e.unread_count!==void 0&&(a.value=e.unread_count);break;case"marked_all_read":n.value.forEach(o=>{o.is_read||(o.is_read=!0,o.read_at=new Date().toISOString())}),a.value=e.unread_count||0;break;case"dismissed":if(e.notification_id){const o=n.value.findIndex(r=>r.id===e.notification_id);o!==-1&&(n.value.splice(o,1),u.value=Math.max(0,u.value-1))}break}console.log(`🔄 Notification update: ${e.type}`)},ee=e=>{var r;n.value.unshift(e),e.is_read||a.value++,u.value++,console.log(`📢 System announcement: ${e.title}`),(r=G().$bus)==null||r.emit("system-announcement",e)};return{notifications:n,unreadCount:a,totalCount:u,preferences:k,stats:b,loading:E,error:g,isConnected:S,connectionStatus:y,currentPage:A,pageSize:O,hasNext:T,hasPrevious:x,filters:N,unreadNotifications:M,recentNotifications:R,notificationsByType:U,hasUnreadNotifications:B,fetchNotifications:I,fetchNotificationById:L,markAsRead:F,markAllAsRead:j,dismissNotification:H,bulkAction:J,fetchPreferences:Y,updatePreferences:q,fetchStats:K,fetchAdminStats:V,fetchUnreadCount:D,createSystemAnnouncement:Q,connectToNotifications:t,disconnectFromNotifications:i,sendPing:()=>{c&&c.readyState===WebSocket.OPEN&&c.send(JSON.stringify({type:"ping",timestamp:Date.now()}))},clearError:()=>{g.value=null},updateFilters:e=>{N.value={...N.value,...e}},resetState:()=>{n.value=[],a.value=0,u.value=0,k.value=null,b.value=null,E.value=!1,g.value=null,A.value=1,T.value=!1,x.value=!1,N.value={include_read:!0,include_dismissed:!1,page:1,page_size:20}},initializeNotifications:async()=>{if(!P().isAuthenticated.value){console.log("ℹ️ User not authenticated, skipping notification initialization");return}try{console.log("🔄 Initializing notifications..."),console.log("📱 Notifications initialized in basic mode (WebSocket disabled)"),console.log("✅ Notifications initialized successfully (basic mode)")}catch(o){console.error("❌ Error initializing notifications:",o),console.log("🔄 Continuing without notifications...")}}}}),me=()=>{const n=ce(),{showToast:a}=ae(),{notifications:u,unreadCount:k,totalCount:b,preferences:E,stats:g,loading:S,error:y,isConnected:v,connectionStatus:$,unreadNotifications:A,recentNotifications:O,hasUnreadNotifications:T}=ie(n),x=async()=>{try{if(!X().isAuthenticated.value){console.log("ℹ️ User not authenticated, skipping notification initialization");return}await n.initializeNotifications()}catch(t){console.error("Error initializing notifications:",t)}},N=async t=>{try{await n.fetchNotifications(t)}catch(i){console.error("Error fetching notifications:",i),a({title:"Error",message:"No se pudieron cargar las notificaciones",type:"error"})}},c=async()=>{if(!(!n.hasNext||S.value))try{await n.fetchNotifications({page:n.currentPage+1,page_size:n.pageSize})}catch(t){console.error("Error loading more notifications:",t),a({title:"Error",message:"No se pudieron cargar más notificaciones",type:"error"})}},p=async t=>{try{if(!await n.markAsRead(t))throw new Error("Failed to mark as read")}catch(i){console.error("Error marking notification as read:",i),a({title:"Error",message:"No se pudo marcar la notificación como leída",type:"error"})}},W=async()=>{try{if(await n.markAllAsRead())a({title:"Éxito",message:"Todas las notificaciones han sido marcadas como leídas",type:"success"});else throw new Error("Failed to mark all as read")}catch(t){console.error("Error marking all notifications as read:",t),a({title:"Error",message:"No se pudieron marcar las notificaciones como leídas",type:"error"})}},P=async t=>{try{if(await n.dismissNotification(t))a({title:"Notificación eliminada",message:"La notificación ha sido eliminada",type:"info"});else throw new Error("Failed to dismiss notification")}catch(i){console.error("Error dismissing notification:",i),a({title:"Error",message:"No se pudo eliminar la notificación",type:"error"})}},M=async t=>{try{if(await n.bulkAction(t)){const m={mark_read:"marcadas como leídas",mark_unread:"marcadas como no leídas",dismiss:"eliminadas"}[t.action];a({title:"Éxito",message:`${t.notification_ids.length} notificaciones ${m}`,type:"success"})}else throw new Error("Failed to perform bulk action")}catch(i){console.error("Error performing bulk action:",i),a({title:"Error",message:"No se pudo realizar la acción en las notificaciones",type:"error"})}},R=async()=>{try{await n.fetchPreferences()}catch(t){console.error("Error fetching preferences:",t),a({title:"Error",message:"No se pudieron cargar las preferencias",type:"error"})}},U=async t=>{try{if(await n.updatePreferences(t))a({title:"Preferencias actualizadas",message:"Tus preferencias de notificación han sido guardadas",type:"success"});else throw new Error("Failed to update preferences")}catch(i){console.error("Error updating preferences:",i),a({title:"Error",message:"No se pudieron actualizar las preferencias",type:"error"})}},B=async()=>{try{return await n.fetchStats()}catch(t){return console.error("Error fetching notification statistics:",t),a({title:"Error",message:"No se pudieron cargar las estadísticas",type:"error"}),null}},I=async()=>{try{return await n.fetchAdminStats()}catch(t){return console.error("Error fetching admin notification statistics:",t),a({title:"Error",message:"No se pudieron cargar las estadísticas de administración",type:"error"}),null}},L=async t=>{try{if(await n.createSystemAnnouncement(t))a({title:"Anuncio creado",message:"El anuncio del sistema ha sido enviado",type:"success"});else throw new Error("Failed to create announcement")}catch(i){console.error("Error creating system announcement:",i),a({title:"Error",message:"No se pudo crear el anuncio del sistema",type:"error"})}},F=async t=>{t.is_read||await p(t.id),t.action_url&&await se(t.action_url)},j=t=>{const i=(()=>{switch(t.priority){case"urgent":return"error";case"high":return"warning";case"low":return"info";default:return"info"}})();a({title:t.title,message:t.message,type:i,duration:t.priority==="urgent"?0:5e3,action:t.action_url?{label:"Ver",handler:()=>F(t)}:void 0})},H=t=>u.value.filter(i=>i.notification_type===t),J=t=>u.value.filter(i=>i.priority===t),Y=(t=7)=>{const i=new Date;return i.setDate(i.getDate()-t),u.value.filter(m=>new Date(m.created_at)>=i)},q=(t,i=24)=>{if(!t.expires_at)return!1;const m=new Date(t.expires_at),d=new Date,_=(m.getTime()-d.getTime())/(1e3*60*60);return _>0&&_<=i},K=t=>{const i=new Date(t),m=new Date,d=Math.floor((m.getTime()-i.getTime())/1e3);return d<60?"Ahora":d<3600?`${Math.floor(d/60)} min`:d<86400?`${Math.floor(d/3600)} h`:d<604800?`${Math.floor(d/86400)} días`:i.toLocaleDateString("es-ES",{day:"numeric",month:"short",year:i.getFullYear()!==m.getFullYear()?"numeric":void 0})},V=async()=>{try{await n.connectToNotifications()}catch(t){console.error("Error connecting to notifications:",t),a({title:"Error de conexión",message:"No se pudo conectar a las notificaciones en tiempo real",type:"warning"})}},D=()=>{n.disconnectFromNotifications()};return{notifications:u,unreadCount:k,totalCount:b,preferences:E,stats:g,loading:S,error:y,isConnected:v,connectionStatus:$,unreadNotifications:A,recentNotifications:O,hasUnreadNotifications:T,initializeNotifications:x,fetchNotifications:N,loadMoreNotifications:c,markAsRead:p,markAllAsRead:W,dismissNotification:P,performBulkAction:M,fetchPreferences:R,updatePreferences:U,fetchStats:B,fetchAdminStats:I,createSystemAnnouncement:L,handleNotificationClick:F,showNotificationToast:j,filterNotificationsByType:H,filterNotificationsByPriority:J,getRecentNotifications:Y,isNotificationExpiringSoon:q,formatNotificationTime:K,connectToNotifications:V,disconnectFromNotifications:D,cleanup:()=>{D(),n.resetState()}}};export{ce as a,me as u};
